# This file is managed by Salt
server {
    listen 80 default_server;
    server_name _;

{% if pillar.get('letsencrypt') %}
    location /.well-known/acme-challenge {
        root /data/letsencrypt;
    }
{% endif %}

    location / {

{% if salt['grains.get']('environment') == 'sandbox' or
    salt['grains.get']('environment') == 'staging' %}
        satisfy any;
        allow 10.0.0.0/8;
        deny all;
        auth_basic  "Restricted";
        auth_basic_user_file   conf.d/htpasswd;
{% endif %}

        proxy_read_timeout 180;
        proxy_connect_timeout 180;
        proxy_set_header X-Vhm-Host $http_host;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        rewrite ^(.*)$ /VirtualHostBase/http/$host:80/Plone/VirtualHostRoot$1 break;
        proxy_pass http://127.0.0.1:8080;
    }
}

# Uncomment this to to redirect all traffice to HTTPS only
#server {
#    listen 80 default_server;
#    server_name _;
#    return 301 https://$host$request_uri;
#}

# Uncomment this and adjust for the correct certnames
#server {
#    listen 443 ssl http2;
#    client_max_body_size 100m;
#
#    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
#    ssl_certificate /usr/local/etc/certs/sixfeetup.com.wildcard.crt;
#    ssl_certificate_key /usr/local/etc/certs/sixfeetup.com.wildcard.key;
#    ssl_session_timeout 1d;
#    ssl_session_cache shared:SSL:50m;
#
#    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
#    ssl_dhparam /usr/local/etc/certs/dhparam.pem;
#
#    # intermediate configuration. tweak to your needs.
#    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
#    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
#    ssl_prefer_server_ciphers on;
#
#    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#    add_header Strict-Transport-Security max-age=15768000;
#
#    # OCSP Stapling ---
#    # fetch OCSP records from URL in ssl_certificate and cache them
#    ssl_stapling on;
#    ssl_stapling_verify on;
#
#    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
#    ssl_trusted_certificate /usr/local/etc/certs/sixfeetup.com.wildcard.ca;
#
{% if salt['network.in_subnet']('10.12.0.0/16') %}
#    resolver 10.12.253.1 10.57.254.1;
{% endif %}

{% if pillar.get('letsencrypt') %}
#    location /.well-known/acme-challenge {
#        root /data/letsencrypt;
#    }
{% endif %}
#
#    location / {
{% if salt['grains.get']('environment') == 'sandbox' or
    salt['grains.get']('environment') == 'staging' %}
#        satisfy any;
#        allow 10.0.0.0/8;
#        deny all;
#        auth_basic  "Restricted";
#        auth_basic_user_file   conf.d/htpasswd;
{% endif %}
#
#        proxy_read_timeout 180;
#        proxy_connect_timeout 180;
#        proxy_set_header X-Vhm-Host $http_host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        proxy_set_header Host $http_host;
#
#        rewrite ^(.*)$ /VirtualHostBase/https/$host:443/Plone/VirtualHostRoot$1 break;
{# Try to get the first private address on the machine -#}
{% set interfaces = salt['network.interfaces']() -%}
{% set int_ip = False -%}
{% for interface in interfaces -%}
  {% if  "inet" in interfaces[interface] and interfaces[interface]['inet'][0]['address']|truncate(length=3,killwords=True,end='') == '10.' and not interface.startswith("carp") -%}
    {% if int_ip == False -%}
#        proxy_pass http://{{ interfaces[interface]['inet'][0]['address'] }}:8080;
      {% set int_ip = True -%}
    {% endif -%}
  {% endif -%}
{%- endfor %}
#    }
#}
